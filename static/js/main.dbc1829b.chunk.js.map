{"version":3,"sources":["components/Button.js","components/Header.js","components/Footer.js","components/Task.js","components/Tasks.js","components/AddTask.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Button","color","text","onClick","style","backgroundColor","className","defaultProps","title","Header","onAdd","showAdd","location","useLocation","pathname","Footer","to","Task","task","onDelete","onToggle","reminder","onDoubleClick","id","cursor","day","Tasks","tasks","map","AddTask","useState","setText","setDay","setReminder","onSubmit","e","preventDefault","alert","type","placeholder","value","onChange","target","checked","currentTarget","About","App","showAddTask","setShowAddtask","setTasks","addTask","Math","floor","random","newTask","deleteTask","filter","toggleReminder","path","exact","render","props","length","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbc1829b.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\r\n\r\nconst Button = ({ color, text, onClick }) => {\r\n    \r\n    return <button onClick={onClick} style={{backgroundColor: color}} className='btn'>{text}</button>\r\n}\r\n\r\nButton.defaultProps = {\r\n    title: 'steelblue',\r\n}\r\n\r\nButton.propTypes = {\r\n    text: PropTypes.string,\r\n    color: PropTypes.string,\r\n    onClick: PropTypes.func,\r\n}\r\n\r\nexport default Button\r\n\r\n","import PropTypes from 'prop-types'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Button from './Button'\r\n\r\nconst Header = ({title, onAdd, showAdd}) => {\r\n    const location = useLocation()\r\n\r\n    return (\r\n        <header className='header'>\r\n            <h1>{title}</h1>\r\n            {location.pathname === '/' && <Button color={showAdd? 'red' : 'green'} text={showAdd? 'Close' : 'Add'} onClick={onAdd}/>}\r\n        </header>\r\n    )\r\n}\r\n\r\nHeader.defaultProps = {\r\n    title: 'Task tracker',\r\n}\r\n\r\nHeader.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Header\r\n","import { Link } from 'react-router-dom'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <p>Copyright &copy; 2021</p>\r\n            <Link to='/about'>About</Link>\r\n            \r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n\r\n","import { FaTimes } from 'react-icons/fa'\r\n\r\nconst Task = ({ task, onDelete, onToggle }) => {\r\n    return (\r\n        <div className={`task ${task.reminder ? 'reminder' : ''}`} onDoubleClick={() => onToggle(task.id)}>\r\n            <h3>{task.text} <FaTimes style={{color:'red', cursor:'pointer'}} onClick={() => onDelete(task.id)}/></h3>\r\n            <p>{task.day}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Task\r\n","import Task from './Task'\r\n\r\nconst Tasks = ({ tasks, onDelete, onToggle }) => {\r\n    return (\r\n        <div>\r\n            {tasks.map((task) => (<Task key={task.id} task={task} onDelete={onDelete} onToggle={onToggle}/>))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tasks\r\n","import { useState } from 'react'\r\n\r\nconst AddTask = ({ onAdd }) => {\r\n    const [text, setText] = useState('')\r\n    const [day, setDay] = useState('')\r\n    const [reminder, setReminder] = useState(false)\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        if(!text){\r\n            alert('Please add a task')\r\n            return\r\n        }\r\n\r\n        onAdd({ text, day, reminder })\r\n\r\n        setText('')\r\n        setDay('')\r\n        setReminder(false)\r\n    }\r\n\r\n    return (\r\n        <form className='add-form' onSubmit={onSubmit}>\r\n            <div className='form-control'>\r\n                <label>Task</label>\r\n                <input type='text' placeholder='Add Task' value={text} onChange={(e) => setText(e.target.value)}/>\r\n            </div>\r\n            <div className='form-control'>\r\n                <label>Day & Time</label>\r\n                <input type='text' placeholder='Add Day & Time' value={day} onChange={(e) => setDay(e.target.value)}/>\r\n            </div>\r\n            <div className='form-control form-control-check'>\r\n                <label>Set Reminder</label>\r\n                <input type='checkbox' checked={reminder} value={reminder} onChange={(e) => setReminder(e.currentTarget.checked)}/>\r\n            </div>\r\n\r\n            <input type='submit' value='Save Task' className='btn btn-block'/>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddTask\r\n","import { Link } from 'react-router-dom'\r\n\r\nconst About = () => {\r\n    return (\r\n        <div>\r\n            <h4>Version 1.0.0</h4>\r\n            <Link to='/'>Go Back</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import { useState, useEffect } from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\nimport About from './components/About'\n\nconst App = () =>  {\n  const [showAddTask, setShowAddtask] = useState(false)\n  const [tasks, setTasks] = useState([ {\n    \"id\": 1,\n    \"text\": \"Doctor Appointment\",\n    \"day\": \"Feb 5th at 2.30pm\",\n    \"reminder\": true\n  },\n  {\n    \"id\": 3,\n    \"text\": \"Food Shopping\",\n    \"day\": \"Feb 5th at 2.30pm\",\n    \"reminder\": false\n  }])\n\n  // useEffect(() => {\n  //   const getTasks = async() => {\n  //     const tasksFromServer = await fetchTasks()\n  //     setTasks(tasksFromServer)\n  //   }\n\n  //   getTasks()\n  // }, [])\n\n\n  // // Fetch Tasks\n  // const fetchTasks = async() => {\n  //   const res = await fetch('http://localhost:5000/tasks')\n  //   const data = await res.json()\n\n  //   return data\n  // }\n\n  //   // Fetch Task\n  //   const fetchTask = async(id) => {\n  //     const res = await fetch(`http://localhost:5000/tasks/${id}`)\n  //     const data = await res.json()\n  \n  //     return data\n  //   }\n\n  // // Add Task (With json server)\n  // const addTask = async (task) => {\n  //   const res = await fetch('http://localhost:5000/tasks/', {\n  //     method: 'POST', \n  //     headers: {\n  //       'Content-type': 'application.json'\n  //   }, body: JSON.stringify(task),\n  // })\n\n  //   const data = await res.json()\n  //   setTasks([...tasks, data])\n  // }\n\n  // Add Task (Without json server)\n  const addTask = (task) => {\n    const id = Math.floor(Math.random() * 10000) + 1\n    const newTask = {id, ...task}\n    setTasks([...tasks, newTask])\n  }\n\n  // // Delete Task (With json server)\n  // const deleteTask = async (id) => {\n  //   await fetch(`http://localhost:5000/tasks/${id}`, {method: 'DELETE', })\n  //   setTasks(tasks.filter((task) => task.id !== id))\n  // }\n\n  // Delete Task (Without json server)\n  const deleteTask = (id) => {\n    setTasks(tasks.filter((task) => task.id !== id))\n  }\n\n  // Toggle Reminder (With json server)\n  // const toggleReminder = async (id) => {\n  //   const taskToToggle = await fetchTask(id)\n  //   const updTask = {...taskToToggle, reminder: !taskToToggle.reminder}\n  //   const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n  //     method: 'PUT',\n  //     headers: {\n  //       'Content-type': 'application/json'\n  //     },\n  //     body: JSON.stringify(updTask)\n  //   })\n\n  //   const data = await res.json()\n\n  //   setTasks(tasks.map((task) => task.id === id? {...task, reminder: data.reminder} : task))\n  // }\n\n  // Toggle Reminder (Without json server)\n  const toggleReminder = (id) => {\n    setTasks(tasks.map((task) => task.id === id? {...task, reminder: !task.reminder} : task))\n  }\n\n  return (\n    <Router>\n      <div className=\"container\">\n        <Header onAdd={() => setShowAddtask(!showAddTask)} showAdd={showAddTask}/>\n        <Route path='/' exact render={(props) => (\n          <>\n            {showAddTask && <AddTask onAdd={addTask}/> }\n            {tasks.length > 0 ? <Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleReminder}/> : 'No Tasks To Show'}\n          </>\n        )}/>\n        <Route path='/about' component={About}/>\n        <Footer/>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}